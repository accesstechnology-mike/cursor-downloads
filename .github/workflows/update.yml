name: Update Cursor Download Links

on:
  schedule:
    - cron: "0 * * * *" # Run hourly at minute 0
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  update-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run update script
        run: COMPUTE_SHA256=true bun run scripts/update-links.ts
        env:
          NOTIFICATION_SECRET: ${{ secrets.NOTIFICATION_SECRET }}

      - name: Format everything with Prettier
        run: bunx prettier ./ --write

      - name: Check for changes
        id: git-check
        run: |
          if git diff --quiet -- version-history.json README.md; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push if changed
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          # Only commit the files we intentionally update
          git add -- version-history.json README.md
          git commit -m "Update Cursor download links and version history"
          git push

      - name: Derive latest version
        id: latest
        if: steps.git-check.outputs.changes == 'true'
        run: |
          VERSION=$(jq -r '.versions[0].version' version-history.json)
          DATE=$(jq -r '.versions[0].date' version-history.json)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT

      - name: Build release notes
        id: notes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          echo "Generating release notes for v${{ steps.latest.outputs.version }}"
          cat > generate_notes.py << 'EOF'
          import json
          import sys
          
          with open('version-history.json', 'r') as f:
              data = json.load(f)
          
          latest = data['versions'][0]
          version = latest['version']
          date = latest['date']
          
          print(f"# Cursor v{version}")
          print(f"Released: {date}")
          print()
          print("## Downloads")
          print()
          print("| Platform | Link | Size | SHA256 |")
          print("| --- | --- | --- | --- |")
          
          platforms = latest.get('platforms', {})
          details = latest.get('platformDetails', {})
          
          # Define display names
          display_names = {
              "win32-x64-user": "Windows x64 (User)",
              "win32-arm64-user": "Windows ARM64 (User)", 
              "win32-x64-system": "Windows x64 (System)",
              "win32-arm64-system": "Windows ARM64 (System)",
              "win32-x64": "Windows x64 (System)",
              "win32-arm64": "Windows ARM64 (System)",
              "darwin-universal": "macOS (Universal)",
              "darwin-arm64": "macOS (Apple Silicon)",
              "darwin-x64": "macOS (Intel)",
              "linux-x64": "Linux x64 (AppImage)", 
              "linux-arm64": "Linux ARM64 (AppImage)"
          }
          
          # Sort platforms in desired order
          sort_order = [
              "win32-x64-user", "win32-x64-system", "win32-arm64-user", "win32-arm64-system",
              "darwin-universal", "darwin-arm64", "darwin-x64", "linux-x64", "linux-arm64"
          ]
          
          sorted_platforms = sorted(platforms.keys(), key=lambda x: sort_order.index(x) if x in sort_order else 999)
          
          for platform in sorted_platforms:
              if platform not in platforms:
                  continue
              url = platforms[platform]
              platform_details = details.get(platform, {})
              
              # Format size
              size_bytes = platform_details.get('sizeBytes')
              if size_bytes:
                  if size_bytes >= 1024**3:
                      size_str = f"{size_bytes / (1024**3):.1f} GB"
                  elif size_bytes >= 1024**2:
                      size_str = f"{size_bytes / (1024**2):.1f} MB"
                  elif size_bytes >= 1024:
                      size_str = f"{size_bytes / 1024:.1f} KB"
                  else:
                      size_str = f"{size_bytes} B"
              else:
                  size_str = "-"
              
              # Format SHA256
              sha256 = platform_details.get('sha256')
              sha_str = f"`{sha256}`" if sha256 else "-"
              
              display_name = display_names.get(platform, platform)
              print(f"| {display_name} | [Download]({url}) | {size_str} | {sha_str} |")
          EOF
          
          python3 generate_notes.py > RELEASE_NOTES.md
          echo "path=RELEASE_NOTES.md" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        if: steps.git-check.outputs.changes == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.latest.outputs.version }}
          name: Cursor v${{ steps.latest.outputs.version }}
          body_path: ${{ steps.notes.outputs.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
